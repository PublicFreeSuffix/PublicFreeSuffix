name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'whois/*.json'

permissions:
  contents: write
  pull-requests: write
  issues: write
  statuses: write

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    name: Validate Pull Request
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd .github/scripts
        npm ci

    - name: Get PR information
      id: pr-info
      uses: actions/github-script@v7
      with:
        script: |
          const { data: pullRequest } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          core.setOutput('pr-title', pullRequest.title);
          core.setOutput('pr-body', pullRequest.body || '');
          core.setOutput('pr-number', context.issue.number);
          core.setOutput('pr-author', pullRequest.user.login);
          core.setOutput('files', JSON.stringify(files));
          core.setOutput('head-sha', pullRequest.head.sha);

    - name: Validate Pull Request
      id: validate
      run: |
        cd .github/scripts
        node validate-pr.js
      env:
        PR_TITLE: ${{ steps.pr-info.outputs.pr-title }}
        PR_BODY: ${{ steps.pr-info.outputs.pr-body }}
        PR_NUMBER: ${{ steps.pr-info.outputs.pr-number }}
        PR_AUTHOR: ${{ steps.pr-info.outputs.pr-author }}
        PR_FILES: ${{ steps.pr-info.outputs.files }}
        HEAD_SHA: ${{ steps.pr-info.outputs.head-sha }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}

    - name: Comment on PR
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let validationResult;
          try {
            const resultData = fs.readFileSync('.github/scripts/validation-result.json', 'utf8');
            validationResult = JSON.parse(resultData);
          } catch (error) {
            validationResult = {
              isValid: false,
              errors: ['Failed to read validation results'],
              report: '## ❌ PR Validation Failed\n\nInternal error occurred during validation.'
            };
          }
          
          // Find existing validation comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('PR Validation')
          );
          
          const commentBody = validationResult.report;
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }

    - name: Set PR status
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let validationResult;
          try {
            const resultData = fs.readFileSync('.github/scripts/validation-result.json', 'utf8');
            validationResult = JSON.parse(resultData);
          } catch (error) {
            validationResult = { isValid: false };
          }
          
          // Set commit status
          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: '${{ steps.pr-info.outputs.head-sha }}',
            state: validationResult.isValid ? 'success' : 'failure',
            target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
            description: validationResult.isValid ? 
              'All PR validation checks passed' : 
              `Validation failed: ${validationResult.errors?.length || 0} error(s)`,
            context: 'PR Validation'
          });

    - name: Fail if validation failed
      if: always()
      run: |
        if [ -f .github/scripts/validation-result.json ]; then
          VALIDATION_RESULT=$(cat .github/scripts/validation-result.json)
          IS_VALID=$(echo "$VALIDATION_RESULT" | jq -r '.isValid')
          if [ "$IS_VALID" != "true" ]; then
            echo "PR validation failed"
            exit 1
          fi
        else
          echo "Validation result file not found"
          exit 1
        fi 